------- FILE main.asm LEVEL 1 PASS 2
      1  10000 ????						; Stable Image Test Atari 2600
      2  10000 ????						; Author Niclas Johansson
      3  10000 ????						; Date 2024-11-17
      4  10000 ????						; Version 1.0
      5  10000 ????						; -------------------------------------------------------------------------------------------------
      6  10000 ????						; COMPILER METADATA 
      7  10000 ????						; Import the VCS header file and set the origin for all memory adressing
      8  10000 ????						; -------------------------------------------------------------------------------------------------
      9  10000 ????				       PROCESSOR	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       INCLUDE	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; WSYNC    ---- ----	Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; WSYNC	xx00 0000			P0-PF	P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE main.asm
     11  f000					      ORG	$F000
     12  f000
     13  f000
     14  f000							; -------------------------------------------------------------------------------------------------
     15  f000							; SETUP
     16  f000							; First disable interrupts. This is completly unneccessary but good practice apparently 🤷‍♂️
     17  f000							; Then clear decimal mode
     18  f000							; Set the stack pointer to FF
     19  f000							; Finally, clear memory
     20  f000							; -------------------------------------------------------------------------------------------------
     21  f000				   SETUP
     22  f000		       78		      SEI
     23  f001		       d8		      CLD
     24  f002		       a2 ff		      LDX	#$FF
     25  f004		       9a		      TXS
     26  f005		       a9 00		      LDA	#$00
     27  f007				   CLEAR
     28  f007		       95 00		      STA	0,X
     29  f009		       ca		      DEX
     30  f00a		       d0 fb		      BNE	CLEAR
     31  f00c
     32  f00c
     33  f00c							; -------------------------------------------------------------------------------------------------
     34  f00c							; BACKGROUND COLORS
     35  f00c							; Set the three background colors to use
     36  f00c							; The order of the registries used are reversed due to counting down when picking colors
     37  f00c							; -------------------------------------------------------------------------------------------------
     38  f00c							; First
     39  f00c		       a9 c6		      LDA	#$C6
     40  f00e		       85 83		      STA	$83
     41  f010							; Second
     42  f010		       a9 86		      LDA	#$86
     43  f012		       85 82		      STA	$82
     44  f014							; Third
     45  f014		       a9 66		      LDA	#$66
     46  f016		       85 81		      STA	$81
     47  f018
     48  f018
     49  f018							; -------------------------------------------------------------------------------------------------
     50  f018							; MAIN LOOP
     51  f018							; The main loop of the program
     52  f018							; -------------------------------------------------------------------------------------------------
     53  f018				   MAIN
     54  f018		       20 30 f0 	      JSR	SYNC
     55  f01b		       20 6b f0 	      JSR	PRELOAD_BACKGROUND_COLOR
     56  f01e		       20 3f f0 	      JSR	TOP
     57  f021		       20 61 f0 	      JSR	TURN_OFF_VBLANK
     58  f024		       20 47 f0 	      JSR	SHOW_FRAME
     59  f027		       20 66 f0 	      JSR	TURN_ON_VBLANK
     60  f02a		       20 59 f0 	      JSR	BOTTOM
     61  f02d		       4c 18 f0 	      JMP	MAIN
     62  f030
     63  f030
     64  f030							; -------------------------------------------------------------------------------------------------
     65  f030							; VETICAL SYNC
     66  f030							; Syncronize the program with the TV (vertical sync)
     67  f030							; -------------------------------------------------------------------------------------------------
     68  f030				   SYNC
     69  f030		       a9 02		      LDA	#2
     70  f032		       85 00		      STA	VSYNC
     71  f034		       85 02		      STA	WSYNC
     72  f036		       85 02		      STA	WSYNC
     73  f038		       85 02		      STA	WSYNC
     74  f03a		       a9 00		      LDA	#0
     75  f03c		       85 00		      STA	VSYNC
     76  f03e		       60		      RTS
     77  f03f
     78  f03f
     79  f03f							; -------------------------------------------------------------------------------------------------
     80  f03f							; RENDERING BLACK TOP
     81  f03f							; Render the black top part of the screen
     82  f03f							; -------------------------------------------------------------------------------------------------
     83  f03f				   TOP
     84  f03f		       a2 25		      LDX	#37
     85  f041				   TOP_LOOP
     86  f041		       85 02		      STA	WSYNC
     87  f043		       ca		      DEX
     88  f044		       d0 fb		      BNE	TOP_LOOP
     89  f046		       60		      RTS
     90  f047
     91  f047
     92  f047							; -------------------------------------------------------------------------------------------------
     93  f047							; RENDERING FRAME
     94  f047							; Render the colors on the screen
     95  f047							; -------------------------------------------------------------------------------------------------
     96  f047				   SHOW_FRAME
     97  f047		       a0 03		      LDY	#3
     98  f049				   PREPARE_NEXT_COLOR
     99  f049		       a2 40		      LDX	#192/3
    100  f04b				   RENDER_COLOR_LINE
    101  f04b		       85 02		      STA	WSYNC
    102  f04d		       ca		      DEX
    103  f04e		       d0 fb		      BNE	RENDER_COLOR_LINE
    104  f050		       88		      DEY
    105  f051		       b9 80 00 	      LDA	$80,Y
    106  f054		       85 09		      STA	COLUBK
    107  f056		       d0 f1		      BNE	PREPARE_NEXT_COLOR
    108  f058		       60		      RTS
    109  f059
    110  f059
    111  f059							; -------------------------------------------------------------------------------------------------
    112  f059							; RENDERING BLACK BOTTOM
    113  f059							; Render the black bottom part of the screen
    114  f059							; -------------------------------------------------------------------------------------------------
    115  f059				   BOTTOM
    116  f059		       a2 1e		      LDX	#30
    117  f05b				   BOTTOM_LOOP
    118  f05b		       85 02		      STA	WSYNC
    119  f05d		       ca		      DEX
    120  f05e		       d0 fb		      BNE	BOTTOM_LOOP
    121  f060		       60		      RTS
    122  f061
    123  f061
    124  f061							; -------------------------------------------------------------------------------------------------
    125  f061							; TURN OFF AND ON VBLANK
    126  f061							; -------------------------------------------------------------------------------------------------
    127  f061				   TURN_OFF_VBLANK
    128  f061		       a9 00		      LDA	#0
    129  f063		       85 01		      STA	VBLANK
    130  f065		       60		      RTS
    131  f066
    132  f066				   TURN_ON_VBLANK
    133  f066		       a9 02		      LDA	#2
    134  f068		       85 01		      STA	VBLANK
    135  f06a		       60		      RTS
    136  f06b
    137  f06b							; -------------------------------------------------------------------------------------------------
    138  f06b							; PRELOAD BACKGROUND COLOR
    139  f06b							; Set the background color to the first color again
    140  f06b							; This is to avoid a small line of the last color on the first line of the screen
    141  f06b							; -------------------------------------------------------------------------------------------------
    142  f06b				   PRELOAD_BACKGROUND_COLOR
    143  f06b		       a5 83		      LDA	$83
    144  f06d		       85 09		      STA	COLUBK
    145  f06f		       60		      RTS
    146  f070							; -------------------------------------------------------------------------------------------------
    147  f070
    148  f070
    149  f070							; -------------------------------------------------------------------------------------------------
    150  f070							; Set the startup point of the program
    151  f070							; -------------------------------------------------------------------------------------------------
    152  fffc					      ORG	$FFFC
    153  fffc		       00 f0		      .word.w	SETUP
    154  fffe		       00 f0		      .word.w	SETUP
    155  10000							; -------------------------------------------------------------------------------------------------
